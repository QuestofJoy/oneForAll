package myapp;

import myapp.utils.*;
import java.util.Scanner;

public class Main {

  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);

    TUIUtils.clearScreen();

    // login and regester screen
    LoginAndRegister lar = new LoginAndRegister();

    while (!lar.loginAndRegister(scan)) {
    }

    while (ProgramMenus.programSelection(scan)) {
      TUIUtils.clearScreen();
    }

    // close scanner at before exiting main program
    scan.close();
  }

}
package myapp.utils;

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class CurrentUserName {

  LoginAndRegister lar = new LoginAndRegister();
  String DIR_USERS = lar.dirUsers();
  String FILE_TEMPORARY = lar.fileTemporary();

  public String getCurrentUserName() {
    String userName = "user";
    File file = new File(FILE_TEMPORARY);

    if (!file.exists()) {
      System.out.println(
          "it seems you are not logged in which is quiet surprising.\n You are currently using guest account UwU\n");
      TUIUtils.threadSleep(2000);
    }
    try (BufferedReader bfr = new BufferedReader(new FileReader(FILE_TEMPORARY))) {
      userName = bfr.readLine();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return userName;
  }

}
package myapp.utils;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Scanner;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.util.List;
import java.util.ArrayList;
import org.mindrot.jbcrypt.BCrypt;

public class LoginAndRegister {
  // define ALL USER dir
  private final String DIR_USERS = Paths.get("").toAbsolutePath().toString() + File.separator + "USERS";
  private final String FILE_TEMPORARY = Paths.get("").toAbsolutePath().toString() + File.separator + "tmp";

  public String dirUsers() {
    return DIR_USERS;
  }

  public String fileTemporary() {
    return FILE_TEMPORARY;
  }

  private String userName = "guest";

  private String userPassword = "password";

  public boolean loginAndRegister(Scanner scan) {
    boolean loggedIn = false;

    initilizeRequiredFolderAndFile();

    int selection = loginOrSignupSelection(scan);

    TUIUtils.clearScreen();
    if (selection == 0) {
      System.exit(0);
    }
    if (selection == 2) {
      System.out.println("Sign-Up");
      takeUserNameAndPassword(scan, 2);
      if (createNewUser()) {
        System.out.println("User created successfully!");
        saveUserLogin();
      } else {
        System.out.println("User was not created");
        return loggedIn;
      }
      TUIUtils.clearScreen();
    }

    System.out.println("Log-In");
    takeUserNameAndPassword(scan, 1);
    TUIUtils.clearScreen();
    if (checkCredentialMatch()) {
      saveUserLogin();
      currentlyLoggedInUser();
      loadUserDataManually();
      loggedIn = true;
    } else {
      return loggedIn;
    }
    return loggedIn;
  }

  private void initilizeRequiredFolderAndFile() {
    File USERS = new File(DIR_USERS);
    File lastUserName = new File(DIR_USERS + File.separator + "lastUserName.txt");

    // returning early if the files exists
    if (USERS.exists() && lastUserName.exists()) {
      return;
    }

    if (!USERS.mkdir()) {
      System.out.println("Folder could not be loaded.");
    }
    System.out.println("Users dir loaded");

    try {
      if (!lastUserName.createNewFile()) {
        System.out.println("lastUserName file exists.");
      }
      System.out.println("lastUserName file created");
    } catch (IOException e) {
      e.printStackTrace();
      System.out.println("initilizeRequiredFolderAndFile method: sth went wrong");
    }
  }

  private int loginOrSignupSelection(Scanner scan) {

    while (true) {
      System.out.println("(0 to exit)");
      System.out.print("Enter 1 to Log-In and 2 to Sign-Up: ");
      String userInput = scan.nextLine().trim();

      try {
        int choice = Integer.parseInt(userInput);
        if (choice == 0 || choice == 1 || choice == 2) {
          return choice;
        } else {
          wrongUserInputMessege();
        }
      } catch (NumberFormatException nfe) {
        wrongUserInputMessege();
      }
    }

  }

  private boolean createNewUser() {
    boolean created = false;

    File newUser = new File(DIR_USERS + File.separator + userName);
    if (!newUser.mkdir()) {
      System.out.println("That username is taken. Please choose something else!");
      return created;
    }

    File newUserProfile = new File(newUser + File.separator + userName + ".txt");
    File newUserData = new File(newUser + File.separator + userName + "Data.txt");

    try {
      if (newUserProfile.createNewFile() && newUserData.createNewFile()) {
        System.out.println("new user " + userName + " was created");
      } else {
        System.out.println("User could not be created");
      }
    } catch (IOException e) {
      e.printStackTrace();
      System.out.println("createNewUser");
    }

    try (
        BufferedWriter bfw = new BufferedWriter(new FileWriter(newUserProfile));) {
      bfw.write("Username=" + userName);
      bfw.newLine();
      bfw.write("Password=" + userPassword);
      bfw.newLine();

      created = true;
    } catch (IOException e) {
      e.printStackTrace();
    }

    return created;
  }

  private boolean checkCredentialMatch() {
    File user = new File(DIR_USERS + File.separator + userName + File.separator + userName + ".txt");
    String line;
    boolean matches = false;

    if (!user.exists()) {
      System.out.println("User not found! Please make an account first.");
      return matches;
    }

    System.out.println("User found! Checking credentials...");

    List<String> userInfo = new ArrayList<>();
    try (BufferedReader bfr = new BufferedReader(new FileReader(user))) {
      while ((line = bfr.readLine()) != null) {
        line = line.substring(line.indexOf("=") + 1);
        userInfo.add(line);
      }
    } catch (IOException e) {
      e.printStackTrace();
    }

    if (userInfo.get(0).equals(userName) && BCrypt.checkpw(userPassword, userInfo.get(1))) {
      System.out.println("Credentials matches!!!");
      matches = true;
    } else {
      System.out.println("""
          '(＞人＜;)  Yamete!!
          Stop right there, senpai!!!
          Credentials does not match!!!""");

    }
    return matches;
  }

  private boolean loadUserDataManually() {
    File userData = new File(DIR_USERS + File.separator + userName + File.separator + userName + "Data.txt");

    if (!userData.exists()) {
      System.out.println("No user data found!! It might have been curropted or deleted!");
      return false;
    }

    System.out.println("Loading User Data...");
    // will add user data after creating game
    // current plan is the user data will have achivements and stats saved
    System.out.println("User data loaded successfully");
    return true;
  }

  // logOut option
  private void logOut() {

  }

  // log in or signup screen
  private void takeUserNameAndPassword(Scanner scan, int choice) {
    boolean b = false;
    while (!b) {
      System.out.print("Username: ");
      this.userName = scan.nextLine();

      if (userName.length() > 10) {
        System.out.println("Username should not exceed 10 characters!");
      } else if (userName.matches(".*[^a-zA-Z0-9].*")) {
        System.out.println("Please exclude special characters");
      } else {
        b = true;
      }
    }

    System.out.println("NOTE: Your password will be visible on screen! \nSorry :3");
    if (choice == 2) {
      System.out.print("Password: ");
      this.userPassword = BCrypt.hashpw(scan.nextLine(), BCrypt.gensalt());
    } else {
      System.out.print("Password: ");
      this.userPassword = scan.nextLine();
    }
  }

  private void saveUserLogin() {
    File lastUserName = new File(DIR_USERS + File.separator + "lastUserName.txt");

    try (FileWriter fw = new FileWriter(lastUserName);) {
      fw.write(userName);
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  private void currentlyLoggedInUser() {
    File tmpFile = new File(FILE_TEMPORARY);

    try (FileWriter fw = new FileWriter(tmpFile)) {
      tmpFile.createNewFile();
      tmpFile.deleteOnExit();
      fw.write(userName);
    } catch (IOException e) {

    }

  }

  private void wrongUserInputMessege() {
    TUIUtils.clearScreen();
    TUIUtils.threadSleep(1000);
    System.out.printf("\"( – ⌓ – )*");
    TUIUtils.threadSleep(2000);
    TUIUtils.clearScreen();
    TUIUtils.threadSleep(1000);
    System.out.printf("IT'S");
    TUIUtils.threadSleep(800);
    System.out.printf(" EITHER");
    TUIUtils.threadSleep(800);
    System.out.printf(" 1");
    TUIUtils.threadSleep(800);
    System.out.printf(" OR");
    TUIUtils.threadSleep(800);
    System.out.printf(" 2");
    TUIUtils.threadSleep(800);
    System.out.printf(" MOTHER");
    TUIUtils.threadSleep(800);
    System.out.printf(" F***ER!!!");
    TUIUtils.threadSleep(1000);
    System.out.println("""

        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⢶⣶⣶⠼⣦⣤⣼⣼⡆⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠖⣯⠿⠟⠛⠻⢶⣿⣯⣿⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣖⣺⡿⠿⠷⠶⠒⢶⣶⠖⠀⠉⡻⢻⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⣴⢻⣭⣫⣿⠁⠀⠀⠀⠀⠀⠀⠀⢀⣾⠃⢀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⢀⣖⡿⠋⢙⣿⠿⢿⠿⣿⡦⠄⠀⠀⠀⣠⣾⠟⠀⠀⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⢀⣰⣿⣴⣿⡿⠿⠿⠿⢿⣦⣄⠀⠀⠀⣠⣾⣿⠃⠀⢀⣸⡿⣳⣶⣲⡄⠀⠀⠀⠀⠀⠀
        ⠀⠀⣾⣽⡿⣛⣵⠾⠿⠿⠷⣦⣌⠻⣷⣄⢰⣿⠟⠁⠀⢠⣾⠿⢡⣯⠸⠧⢽⣄⠀⠀⠀⠀⠀
        ⠀⢸⡇⡟⣴⡿⢟⣽⣾⣿⣶⣌⠻⣧⣹⣿⡿⠋⠀⠀⠀⣾⠿⡇⣽⣿⣄⠀⠀⠉⠳⣄⢀⡀⠀
        ⠀⢸⠇⢳⣿⢳⣿⣿⣿⣿⣿⣿⡆⢹⡇⣿⡇⠀⡆⣠⣼⡏⢰⣿⣿⣿⣿⣦⠀⠀⠀⠈⠳⣅⠀
        ⠀⣸⡀⢸⣿⢸⣿⣿⣿⣿⣿⣿⡇⣸⡇⣿⡇⠀⡟⣻⢳⣷⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠘⣧
        ⢰⡟⡿⡆⠹⣧⡙⢿⣿⣿⠿⡟⢡⣿⢷⣿⣧⠾⢠⣿⣾⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠘
        ⠀⠻⡽⣦⠀⠈⠙⠳⢶⣦⡶⠞⢻⡟⡸⠟⠁⢠⠟⠉⠉⠙⠿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⡴
        ⠀⠀⢸⣿⡇⠀⠀⣀⣠⠀⢀⡀⠸⣹⠇⠀⣰⡟⡀⠀⠈⠛⠻⢿⣻⣿⡿⠀⠀⠀⠀⠀⠀⡠⠁
        ⠀⠀⢸⣿⣇⣴⢿⣿⣿⣿⣮⣿⣷⡟⠀⣰⣿⢰⠀⣀⠀⠀⠀⢀⣉⣿⡇⠀⠀⠀⠀⠀⣸⠃⠀
        ⠀⠀⢸⣿⡟⣯⠸⣿⣿⣿⣿⢈⣿⡇⣼⣿⠇⣸⡦⣙⣷⣦⣴⣯⠿⠛⢷⡀⠀⠀⠀⣰⡟⠀⠀
        ⠀⠀⠘⣿⣿⡸⣷⣝⠻⠟⢋⣾⣟⣰⡏⣠⣤⡟⠀⠀⠈⠉⠁⠀⠀⠀⠀⢻⣶⠀⢀⣿⠁⠀⠀
        ⠀⠀⠀⢸⡿⣿⣦⣽⣛⣛⣛⣭⣾⣷⡶⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⡟⠀⠀⠀⠀
        ⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠁⢸⢻⠁⠀⠀⠀⠀
        ⠀⠀⠀⠀⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣤⣤⣀⣀⣀⣀⣀⣠⣤⠶⠛⠁⢀⣾⡟⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⢿⣻⣿⣿⣿⣿⣿⣿⣎⣿⡅⠀⠈⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⣼⣿⠁⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡷⠟⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⠻⢿⣿⣿⣟⣂⣀⣀⣀⣀⣀⣀⣤⠴⠋⠁⣾⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣷⣷⡄⠀⠀⠀⠉⠉⠉⠉⠉⠀⠀⠀⢀⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
        ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣷⣤⣤⣤⣤⣄⣤⣤⡤⠴⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

                       """);
    // switch end
    TUIUtils.threadSleep(1000);
  }

}
package myapp.utils;

import java.util.Scanner;

import myapp.AppsAndGames.Hangman.Hangman;
import myapp.AppsAndGames.ToDoList.ToDoList;

public class ProgramMenus {

  public static boolean programSelection(Scanner scan) {

    boolean runProgram = true;
    LoginAndRegister lar = new LoginAndRegister();

    System.out.println("What program do you want to use today?");
    System.out.println("--------------------------------------");
    System.out.println("1. To-Do-List");
    System.out.println("2. Hangman");

    // this is a cracked log out. it does not log out just returns to the
    // login and signup screen
    // the newly logged in user's data will be loaded
    // its like overriding... idk
    System.out.println("3. Logout");
    System.out.println("4. Exit program");
    System.out.print("Enter your selection: ");

    if (!scan.hasNextInt()) {
      System.out.println("Please enter a number!");
      scan.nextLine();
      return true;
    }

    int selection = scan.nextInt();
    scan.nextLine();

    switch (selection) {
      case 1 -> new ToDoList(scan);
      case 2 -> new Hangman(scan);
      case 3 -> {
        TUIUtils.clearScreen();
        while (!lar.loginAndRegister(scan)) {
        }
      }
      case 4 -> {
        TUIUtils.clearScreen();
        System.out.println("Have a nice day!!\nbyeee :)");
        TUIUtils.clearScreen(1250);
        runProgram = false;
      }
      default -> System.out.println("under production...");
    }

    return runProgram;

  }

}
package myapp.utils;

public class TUIUtils {

  public static void clearScreen() {
    System.out.println("\033[H\033[2J");
    System.out.flush();
  }

  public static void clearScreen(int miliseconds) {
    threadSleep(miliseconds);
    System.out.println("\033[H\033[2J");
    System.out.flush();
  }

  public static void threadSleep(int miliseconds) {
    try {
      Thread.sleep(miliseconds);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

}
package myapp.AppsAndGames;

public interface AppsAndGamesInterface {
  void start();

  void head();
}
package myapp.AppsAndGames.Hangman;

import java.util.List;
import java.util.Random;
import java.util.ArrayList;
import java.util.Scanner;

import myapp.AppsAndGames.AppsAndGamesInterface;
import myapp.utils.TUIUtils;

public class Hangman implements AppsAndGamesInterface {

  private List<String> words = new ArrayList<>();
  private List<String> hints = new ArrayList<>();

  private char blanks[] = new char[20];

  public Hangman(Scanner scan) {
    start();
    // Initializing words and hints
    initializeList();
    runGame(scan);
  }

  private void runGame(Scanner scan) {
    TUIUtils.clearScreen(500);
    int tries = 5;

    // generating random number
    Random random = new Random(System.currentTimeMillis());
    int randomNumber = random.nextInt(words.size());

    // Setting up variables
    String userWord = words.get(randomNumber);
    String userHint = hints.get(randomNumber);
    int userWordLength = userWord.length();
    createBlanks(userWordLength);
    boolean wordFound = false;

    while (tries > 0 && !wordFound) {
      // Taking user input
      // I'm directly printing hints because that wont be used again after this
      head();
      System.out.println("Hint for your word is:\n" + userHint);
      System.out.println();
      System.out.print(blanks);
      System.out.print("\nEnter your guess: ");
      char userInputChar = scan.next().charAt(0);

      // checking if the userWord has the char input given by the user
      boolean charFound = inputChecker(userWord, userWordLength, userInputChar);

      // checks is the word was found or not
      if (wordChecker(userWord, userWordLength)) {
        wordFound = true;
      }
      //

      TUIUtils.clearScreen();
      if (charFound) {
        System.out.println("Guess Correct!! UwU");
      } else {
        System.out.println("Guess Incorrect!!! TuT");
        tries--;
      }

      // check if the word is found

    }
    if (tries == 0) {
      System.out.println("""
          get shitted on looser
              ⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣤⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
          ⠀⠀⠀⠀⠀⠀⣀⣶⠿⠛⠋⠉⠀⠀⠀⠀⠀⠈⠉⠙⠻⢷⣦⣀⠀⠀⠀⠀⠀⠀
          ⠀⠀⠀⠀⣠⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢷⣤⡀⠀⠀⠀
          ⠀⠀⢀⣴⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣆⠀⠀
          ⠀⢀⡾⠃⠀⠀⠀⠀⣀⡄⠀⢇⣧⢰⣄⣠⣤⣶⣶⠿⠛⠀⠀⠀⠀⠀⠀⢻⣧⠀
          ⠀⣾⠃⠠⣤⣤⣴⡶⠿⠋⠀⣈⡁⠀⠉⠉⣀⣠⣤⣤⣤⣀⡀⠀⠀⠀⠀⠀⢿⡆
          ⢸⡏⠀⠀⠀⢀⣀⣀⣤⣐⠈⠀⠀⢀⣴⠟⠉⠀⣴⣿⣿⣿⡿⠀⠀⠀⠀⠀⢸⣷
          ⣼⠇⠀⣰⠞⠉⠉⣴⣿⣿⡇⠨⠭⢈⣳⠶⠛⠋⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⢸⡿
          ⣿⠀⠀⠿⠖⠛⠛⠛⠛⠉⠤⠁⠠⠄⠒⡊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡇
          ⢿⡄⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠈⠲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠀
          ⢸⣧⠀⠀⠀⠀⠀⠀⠀⢸⣀⣠⣴⠶⠮⠭⠵⠞⠳⡄⠀⠀⠀⠀⠀⠀⣰⡟⠀⠀
          ⠀⠹⣧⡀⠀⠀⠀⠀⠀⡏⠛⠉⠀⢢⡠⣄⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠏⠀⠀⠀
          ⠀⠀⠙⢷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠳⠞⠀⠀⠀⠀⠀⠀⣠⣶⠟⠁⠀⠀⠀⠀
          ⠀⠀⠀⠀⠉⠛⠷⣦⣄⣀⣀⡀⠀⠀⠀⠀⠀⣀⣀⣤⡶⠟⠋⠀⠀⠀⠀⠀⠀⠀
          ⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠛⠛⠛⠟⠛⠛⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀""");

    } else {
      System.out.println("well done player you found the word!!!\n(ﾉ´ヮ´)ﾉ*:･ﾟ✧");
    }
    TUIUtils.threadSleep(1250);
  }

  private void initializeList() {

    // Add Words
    words.add("HelloWorld");
    words.add("Elephant");
    words.add("Java");
    words.add("user");

    // Add Hints
    hints.add("First words of a programmer");
    hints.add("Largest land mammal.");
    hints.add("What was this program written on?");
    hints.add("Who are you?");

  }

  private void createBlanks(int userWordLength) {
    for (int i = 0; i < userWordLength; i++) {
      blanks[i] = '_';
    }
  }

  private boolean inputChecker(String userWord, int userWordLength, char userInputChar) {
    boolean found = false;

    for (int i = 0; i < userWordLength; i++) {
      if (userInputChar == userWord.charAt(i)) {
        blanks[i] = userWord.charAt(i);
        found = true;
      }
    }
    return found;
  }

  private boolean wordChecker(String userWord, int userWordLength) {
    for (int i = 0; i < userWordLength; i++) {
      if (blanks[i] != userWord.charAt(i)) {
        return false;
      }
    }
    return true;
  }

  @Override
  public void start() {
    System.out.println("Starting Hangman....");
  }

  @Override
  public void head() {
    System.out.println("----------------------------");
    System.out.println("        Hangman game");
    System.out.println("----------------------------");
  }

}
package myapp.AppsAndGames.ToDoList;

import myapp.AppsAndGames.AppsAndGamesInterface;
import myapp.utils.*;

import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.BufferedWriter;

public class ToDoList implements AppsAndGamesInterface {
  private String userName;

  private int count = 0;
  List<String> tasks = new ArrayList<>();

  LoginAndRegister lar = new LoginAndRegister();
  String DIR_USERS = lar.dirUsers();

  public ToDoList(Scanner scan) {
    start();

    // loading user file of to-do-list and creating variable for it
    File userFile = loadUserToDoList();
    loadUserTask(userFile);

    boolean run = true;
    System.out.println("You currently have " + count + " tasks left to do!!");
    while (run) {
      System.out.print("""
           _________________________
          |      ***Options***      |
          |-------------------------|
          |1. Add a new task        |
          |2. List all tasks        |
          |3. List left to-do tasks |
          |4. List completed tasks  |
          |5. Delete task           |
          |6. Return to main menu   |
           -------------------------
           """);
      System.out.print("Enter your choice: ");
      int userChoice = scan.nextInt();
      scan.nextLine();
      TUIUtils.clearScreen();

      switch (userChoice) {
        case 1 -> {
          addNewTask(userFile, scan);
        }
        case 2 -> {
          listTasks(userFile, scan);
          TUIUtils.clearScreen();
          ;
        }
        case 5 -> {
          removeTask(scan, userFile);
        }
        case 6 -> {
          run = false;
        }
        default -> {
          System.out.println("under production....");
          TUIUtils.threadSleep(1250);
        }
      }

    }

  }

  private File loadUserToDoList() {
    File userFile = new File(DIR_USERS + File.separator + userName + File.separator + "to-do-list.txt");

    if (!userFile.exists()) {
      try {
        userFile.createNewFile();
        System.out.println(userName + " to-do-list created");
      } catch (IOException e) {
        e.printStackTrace();
      }
    } else {
      System.out.println(userName + "\'s to-do-list exists");
    }
    return userFile;
  }

  // reads the line count and loads user tasks
  private void listTasks(File userFile) {
    System.out.println();
    System.out.println("Task List");
    System.out.println("------------------------");
    try (BufferedReader bfr = new BufferedReader(new FileReader(userFile))) {
      String line;
      int i = 1;

      while ((line = bfr.readLine()) != null) {
        System.out.println(i++ + ". " + line);
      }
    } catch (IOException e) {
      System.out.println("error listing tasks");
    }
    System.out.println("________________________");
    System.out.println();
    System.out.println("press enter to return");
  }

  private void listTasks(File userFile, Scanner scan) {
    System.out.println();
    System.out.println("Task List");
    System.out.println("------------------------");
    try (BufferedReader bfr = new BufferedReader(new FileReader(userFile))) {
      String line;
      int i = 1;

      while ((line = bfr.readLine()) != null) {
        System.out.println(i++ + ". " + line);
      }
    } catch (IOException e) {
      System.out.println("error listing tasks");
    }
    System.out.println("________________________");
    System.out.println();
    System.out.print("press enter to return ");
    scan.nextLine();
  }

  private void loadUserTask(File userFile) {
    try (BufferedReader bfr = new BufferedReader(new FileReader(userFile))) {
      String line;
      while ((line = bfr.readLine()) != null) {
        count += 1;
        tasks.add(line);
      }
    } catch (IOException e) {
    }
  }

  private void addNewTask(File userFile, Scanner scan) {
    System.out.print("Enter new task: ");
    String line = scan.nextLine();
    tasks.add(count + line);
    try (BufferedWriter bfw = new BufferedWriter(new FileWriter(userFile, true))) {
      bfw.write(line);
      bfw.newLine();
      count++;
      TUIUtils.clearScreen();
      System.out.print("New task added!!!");
      TUIUtils.clearScreen(1250);
    } catch (IOException e) {
      e.printStackTrace();
    }

  }

  private void removeTask(Scanner scan, File userFile) {
    listTasks(userFile);
    int i = -1;
    boolean correctInput = false;
    while (!correctInput) {
      try {
        System.out.println("(enter 0 to return)");
        System.out.print("Enter the task number you want to delete: ");
        i = scan.nextInt();
        if (i == 0) {
          return;
        }
        if (!(i > 0 && i <= count)) {
          System.out.print("Could not find the task number\nEnter task number: ");
        } else {
          correctInput = true;
        }
      } catch (Exception e) {
        System.out.println("Please enter a valid number!");
      }
    }
    tasks.remove(i - 1);
    count--;

    try (BufferedWriter bfw = new BufferedWriter(new FileWriter(userFile))) {
      for (String task : tasks) {
        bfw.write(task);
        bfw.newLine();
        ;
      }
    } catch (IOException e) {
    }
  }

  @Override
  public void start() {
    userName = new CurrentUserName().getCurrentUserName();
    head();
  }

  @Override
  public void head() {
    System.out.println("----------------------------");
    System.out.println("        To-Do-List");
    System.out.println("----------------------------");
  }

}
